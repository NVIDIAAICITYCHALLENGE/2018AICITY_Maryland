import numpy as np


def convert_from_cls_format(cls_boxes):
    """Convert from the class boxes/segms/keyps format generated by the testing
    code.
    """
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None

    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, classes


def bb_intersection_over_union(boxA, boxB):
    # determine the (x, y)-coordinates of the intersection rectangle
    xA = max(boxA[0], boxB[0])
    yA = max(boxA[1], boxB[1])
    xB = min(boxA[2], boxB[2])
    yB = min(boxA[3], boxB[3])

    # compute the area of intersection rectangle
    interArea = (xB - xA) * (yB - yA)

    # compute the area of both the prediction and ground-truth
    # rectangles
    boxAArea = (boxA[2] - boxA[0]) * (boxA[3] - boxA[1])
    boxBArea = (boxB[2] - boxB[0]) * (boxB[3] - boxB[1])

    # compute the intersection over union by taking the intersection
    # area and dividing it by the sum of prediction + ground-truth
    # areas - the interesection area
    iou = interArea / float(boxAArea + boxBArea - interArea)

    # return the intersection over union value
    return iou


def non_max_suppression(boxes, max_bbox_overlap, scores=None):
    """Suppress overlapping detections.

    Original code from [1]_ has been adapted to include confidence score.

    .. [1] http://www.pyimagesearch.com/2015/02/16/
           faster-non-maximum-suppression-python/

    Examples
    --------

        >>> boxes = [d.roi for d in detections]
        >>> scores = [d.confidence for d in detections]
        >>> indices = non_max_suppression(boxes, max_bbox_overlap, scores)
        >>> detections = [detections[i] for i in indices]

    Parameters
    ----------
    boxes : ndarray
        Array of ROIs (x, y, width, height).
    max_bbox_overlap : float
        ROIs that overlap more than this values are suppressed.
    scores : Optional[array_like]
        Detector confidence score.

    Returns
    -------
    List[int]
        Returns indices of detections that have survived non-maxima suppression.

    """
    if len(boxes) == 0:
        return []

    boxes = boxes.astype(np.float)
    pick = []

    x1 = boxes[:, 0]
    y1 = boxes[:, 1]
    x2 = boxes[:, 2] + boxes[:, 0]
    y2 = boxes[:, 3] + boxes[:, 1]

    area = (x2 - x1 + 1) * (y2 - y1 + 1)
    if scores is not None:
        idxs = np.argsort(scores)
    else:
        idxs = np.argsort(y2)

    while len(idxs) > 0:
        last = len(idxs) - 1
        i = idxs[last]
        pick.append(i)

        xx1 = np.maximum(x1[i], x1[idxs[:last]])
        yy1 = np.maximum(y1[i], y1[idxs[:last]])
        xx2 = np.minimum(x2[i], x2[idxs[:last]])
        yy2 = np.minimum(y2[i], y2[idxs[:last]])

        w = np.maximum(0, xx2 - xx1 + 1)
        h = np.maximum(0, yy2 - yy1 + 1)

        overlap = (w * h) / area[idxs[:last]]

        idxs = np.delete(
            idxs, np.concatenate(
                ([last], np.where(overlap > max_bbox_overlap)[0])))

    return pick


def compute_vel(box_vel, det, frame, s_x, s_y, y_min, y_max, H, V0):
    """
    det: (x_1, y_1, x_2, y_2)
    """
    vel = [V0]
    for i, v in enumerate(box_vel):
        c = np.array([(det[i][0] + det[i][2]) / 2.0, det[i][3] - y_min])

        if i == 0:
            f = frame[i]
        else:
            # Transform the Velocities using the computed camera to real world equations in the paper
            v_x_trans = (((H[0][0] * v[0] + H[0][1] * v[1]) * (H[2][0] * c[0] + H[2][1] * c[1] + H[2][2]) -
                          (H[0][0] * c[0] + H[0][1] * c[1] + H[0][2]) * (H[2][0] * v[0] + H[2][1] * v[1])) /
                         ((H[2][0] * c[0] + H[2][1] * c[1] + H[2][2]) ** 2))
            v_y_trans = (((H[1][0] * v[0] + H[1][1] * v[1]) * (H[2][0] * c[0] + H[2][1] * c[1] + H[2][2]) -
                          (H[1][0] * c[0] + H[1][1] * c[1] + H[1][2]) * (H[2][0] * v[0] + H[2][1] * v[1])) /
                         ((H[2][0] * c[0] + H[2][1] * c[1] + H[2][2]) ** 2))

            # Scale Recovery
            s1, s2 = 1.1, 0.9
            a, b = (s2 - s1) / (y_max - y_min), s1
            s = a * c[1] + b

            # Velocity calculation
            instant_vel = np.sqrt(sum([(v_x_trans * s_x) ** 2, (v_y_trans * s_y) ** 2]))
            t_delta = frame[i] - f

            # tranlating the speed to miles/hour
            vi = instant_vel / t_delta * 30 * 9 / 4

            # Suppress noise
            if vi <= 3.0:
                vi = 0.0

                # Speed can be calculated using moving average which is more robust to noisy jitters in instant velocity
            # due to non-ideal detection and tracking
            v_estimate = (vel[i - 1] * i + vi * s) / (i + 1)

            # v_estimate = (vel[i - 1] + vi) / 2.0
            f = frame[i]
            vel.append(v_estimate)
    return vel
